{"mappings":"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","sources":["src/js/demo1.js"],"sourcesContent":["import * as THREE from 'three';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\nimport { MeshSurfaceSampler } from 'three/examples/jsm/math/MeshSurfaceSampler.js';\n\nconst elContent = document.querySelector('.content');\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(\n  60,\n  elContent.offsetWidth / elContent.offsetHeight,\n  0.001,\n  50\n);\n\nconst renderer = new THREE.WebGLRenderer({\n  antialias: true\n});\nrenderer.setSize(elContent.offsetWidth, elContent.offsetHeight);\nelContent.appendChild(renderer.domElement);\n\n\ncamera.position.z = 15;\n\nconst group = new THREE.Group();\nscene.add(group);\n\nconst sparkles = [];\nwindow.sparkles=sparkles;\nconst sparklesGeometry = new THREE.BufferGeometry();\nconst sparklesMaterial = new THREE.ShaderMaterial({\n  uniforms: {\n    pointTexture: {\n      value: new THREE.TextureLoader().load('dotTexture.png')\n    }\n  },\n  vertexShader: document.getElementById(\"vertexshader\").textContent,\n  fragmentShader: document.getElementById(\"fragmentshader\").textContent,\n  depthTest: false,\n  depthWrite: false,\n  blending: THREE.AdditiveBlending\n});\nconst points = new THREE.Points(sparklesGeometry, sparklesMaterial);\ngroup.add(points);\n\nconst p1 = new THREE.Vector3();\nlet sampler = null;\nconst lines = [];\nlet linesColors = [new THREE.Color(0xFAAD80).multiplyScalar(0.5), new THREE.Color(0xFF6767).multiplyScalar(0.5), new THREE.Color(0xFF3D68).multiplyScalar(0.5), new THREE.Color(0xA73489).multiplyScalar(0.5)];\nfunction initLines() {\n  sampler = new MeshSurfaceSampler(turtle).build();\n  \n  for (let i = 0; i < 6; i++) {\n    sampler.sample(p1);\n    const linesMesh = {\n      colorIndex: i % 4,\n      previous: p1.clone()\n    };\n    lines.push(linesMesh);\n  }\n\n  renderer.setAnimationLoop(render);\n}\n\nlet turtle = null;\nnew OBJLoader().load(\n  \"man.obj\",\n  (obj) => {\n    turtle = obj.children[0];\n    turtle.geometry.rotateX(Math.PI * -0.5);\n    turtle.geometry.rotateY(Math.PI * -0.3);\n    initLines();\n  },\n  (xhr) => console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\"),\n  (err) => console.error(err)\n);\n\nconst tempSparklesArrayColors = [];\nfunction findNextVector(line) {\n  let ok = false;\n  while (!ok) {\n    sampler.sample(p1);\n\n    if (p1.distanceTo(line.previous) < 2) {\n      line.previous = p1.clone();\n\n      const spark = new Sparkle();\n      spark.setup(line.previous);\n      sparkles.push(spark);\n\n      tempSparklesArrayColors.push(linesColors[line.colorIndex].r, linesColors[line.colorIndex].g, linesColors[line.colorIndex].b);\n      sparklesGeometry.setAttribute(\"color\", new THREE.Float32BufferAttribute(tempSparklesArrayColors, 3));\n      \n      ok = true;\n    }\n  }\n}\n\nclass Sparkle extends THREE.Vector3 {\n  setup(origin) {\n    this.add(origin).multiplyScalar(2);\n    this.dest = origin;\n\n    this._size = Math.random() * 5 + 0.5;\n    this.size = 1;\n    this.scaleSpeed = Math.random() * 0.03 + 0.03;\n    this.stop = false;\n  }\n  update() {\n    this.x += (this.dest.x - this.x) * 0.08;\n    this.y += (this.dest.y - this.y) * 0.08;\n    this.z += (this.dest.z - this.z) * 0.08;\n    if (this.size < this._size) {\n      this.size += this.scaleSpeed;\n    } else {\n      // if (this.distanceTo(this.dest) < 0.1) {\n      //   this.stop = true;\n      // }\n    }\n  }\n}\n\nlet tempSparklesArray = [];\nlet tempSparklesArraySizes = [];\nfunction render(a) {\n  group.rotation.y += 0.002;\n\n  if (sparkles.length < 40000) {\n    lines.forEach(l => {\n      findNextVector(l);\n      findNextVector(l);\n      findNextVector(l);\n    });\n  }\n\n  sparkles.forEach((s, i) => {\n    if (!s.stop) {\n      s.update();\n    }\n    tempSparklesArray[(i * 3)] = s.x;\n    tempSparklesArray[(i * 3) + 1] = s.y;\n    tempSparklesArray[(i * 3) + 2] = s.z;\n    tempSparklesArraySizes[i] = s.size;\n  });\n  sparklesGeometry.setAttribute(\"position\", new THREE.Float32BufferAttribute(tempSparklesArray, 3));\n  sparklesGeometry.setAttribute(\"size\", new THREE.Float32BufferAttribute(tempSparklesArraySizes, 1));\n\n  renderer.render(scene, camera);\n}\n\nwindow.addEventListener('resize', onWindowResize, false);\n\nfunction onWindowResize(){\n  camera.aspect = elContent.offsetWidth / elContent.offsetHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(elContent.offsetWidth, elContent.offsetHeight);\n}\n"],"names":["$ilwiq","parcelRequire","$d8a97825fde3423f$var$elContent","document","querySelector","$d8a97825fde3423f$var$scene","Scene","$d8a97825fde3423f$var$camera","PerspectiveCamera","offsetWidth","offsetHeight","$d8a97825fde3423f$var$renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","position","z","$d8a97825fde3423f$var$group","Group","add","$d8a97825fde3423f$var$sparkles","window","sparkles","$d8a97825fde3423f$var$sparklesGeometry","BufferGeometry","$d8a97825fde3423f$var$sparklesMaterial","ShaderMaterial","uniforms","pointTexture","value","TextureLoader","load","vertexShader","getElementById","textContent","fragmentShader","depthTest","depthWrite","blending","AdditiveBlending","$d8a97825fde3423f$var$points","Points","$d8a97825fde3423f$var$p1","Vector3","$d8a97825fde3423f$var$sampler","$d8a97825fde3423f$var$lines","$d8a97825fde3423f$var$linesColors","Color","multiplyScalar","$d8a97825fde3423f$var$turtle","$8YxfO","OBJLoader","obj","children","geometry","rotateX","Math","PI","rotateY","$9aI46","MeshSurfaceSampler","build","i","sample","linesMesh","colorIndex","previous","clone","push","setAnimationLoop","$d8a97825fde3423f$var$render","$d8a97825fde3423f$var$initLines","xhr","console","log","loaded","total","err","error","$d8a97825fde3423f$var$tempSparklesArrayColors","$d8a97825fde3423f$var$findNextVector","line","ok","distanceTo","spark","$d8a97825fde3423f$var$Sparkle","setup","r","g","b","setAttribute","Float32BufferAttribute","origin","this","dest","_size","random","size","scaleSpeed","stop","update","x","y","$d8a97825fde3423f$var$tempSparklesArray","$d8a97825fde3423f$var$tempSparklesArraySizes","a","rotation","length","forEach","l","s","render","addEventListener","aspect","updateProjectionMatrix"],"version":3,"file":"index.4d3ed3ae.js.map"}