{"mappings":"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","sources":["src/js/demo2.js","node_modules/three/examples/jsm/postprocessing/RenderPass.js","node_modules/three/examples/jsm/postprocessing/Pass.js","node_modules/three/examples/jsm/postprocessing/UnrealBloomPass.js","node_modules/three/examples/jsm/shaders/CopyShader.js","node_modules/three/examples/jsm/shaders/LuminosityHighPassShader.js","node_modules/three/examples/jsm/postprocessing/EffectComposer.js","node_modules/three/examples/jsm/postprocessing/ShaderPass.js","node_modules/three/examples/jsm/postprocessing/MaskPass.js"],"sourcesContent":["import * as THREE from 'three';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\nimport { MeshSurfaceSampler } from 'three/examples/jsm/math/MeshSurfaceSampler.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\n\nconst elContent = document.querySelector('.content');\nconst pixelRatio = 2;\n\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(\n  60,\n  elContent.offsetWidth / elContent.offsetHeight,\n  0.001,\n  50\n);\ncamera.position.z = 8;\n\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setPixelRatio(pixelRatio);\nrenderer.setSize(elContent.offsetWidth, elContent.offsetHeight);\nelContent.appendChild(renderer.domElement);\n\nconst renderScene = new RenderPass(scene, camera);\n\nconst bloomPass = new UnrealBloomPass(\n  new THREE.Vector2(elContent.offsetWidth, elContent.offsetHeight),\n  1.5,\n  0.4,\n  0.85\n);\nbloomPass.threshold = 0;\nbloomPass.strength = 0.6;\n\nconst composer = new EffectComposer(renderer);\ncomposer.setPixelRatio(pixelRatio);\ncomposer.addPass(renderScene);\ncomposer.addPass(bloomPass);\n\n\nconst group = new THREE.Group();\nscene.add(group);\n\nconst sparkles = [];\nconst sparklesGeometry = new THREE.BufferGeometry();\nconst sparklesMaterial = new THREE.ShaderMaterial({\n  uniforms: {\n    pointTexture: {\n      value: new THREE.TextureLoader().load(\n        \"dotTexture.png\"\n      )\n    }\n  },\n  vertexShader: document.getElementById(\"vertexshader\").textContent,\n  fragmentShader: document.getElementById(\"fragmentshader\").textContent,\n  blending: THREE.AdditiveBlending,\n  alphaTest: 1.0,\n  transparent: true\n});\nconst points = new THREE.Points(sparklesGeometry, sparklesMaterial);\ngroup.add(points);\n\nlet sampler = null;\nconst lines = [];\nlet linesMaterials = [\n  new THREE.LineBasicMaterial({ transparent: true, color: 0x125D98 }),\n  new THREE.LineBasicMaterial({ transparent: true, color: 0xCFD6DE })\n];\nlet galaxyColors = [\n  new THREE.Color(\"#f9fbf2\").multiplyScalar(0.8),\n  new THREE.Color(\"#ffede1\").multiplyScalar(0.8),\n  new THREE.Color(\"#05c7f2\").multiplyScalar(0.8),\n  new THREE.Color(\"#0597f2\").multiplyScalar(0.8),\n  new THREE.Color(\"#0476d9\").multiplyScalar(0.8)\n];\nfunction dots() {\n  sampler = new MeshSurfaceSampler(whale).build();\n\n  for (let i = 0; i < 6; i++) {\n    const linesMesh = new THREE.Line(new THREE.BufferGeometry(), linesMaterials[i % 2]);\n    linesMesh.coordinates = [];\n    linesMesh.previous = null;\n    lines.push(linesMesh);\n    group.add(linesMesh);\n  }\n  requestAnimationFrame(render);\n}\n\nlet whale = null;\nconst loader = new OBJLoader();\nloader.load(\n  \"cathedral.obj\",\n  (obj) => {\n    whale = obj.children[0];\n    whale.geometry.scale(0.3, 0.3, 0.3);\n    whale.geometry.translate(0, -2, 0);\n    whale.geometry.rotateY(0.2);\n    dots();\n  },\n  (xhr) => console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\"),\n  (err) => console.log(\"An error happened\", err)\n);\n\nconst p1 = new THREE.Vector3();\nfunction nextDot(line) {\n  let ok = false;\n  while (!ok) {\n    sampler.sample(p1);\n    if (line.previous && p1.distanceTo(line.previous) < 0.3) {\n      line.coordinates.push(p1.x, p1.y, p1.z);\n      line.previous = p1.clone();\n\n      for (let i = 0; i < 2; i++) {\n        const spark = new Sparkle();\n        spark.setup(p1, line.material.color);\n        sparkles.push(spark);\n      }\n      ok = true;\n    } else if (!line.previous) {\n      line.previous = p1.clone();\n    }\n  }\n}\n\nfunction updateSparklesGeometry() {\n  let tempSparklesArraySizes = [];\n  let tempSparklesArrayColors = [];\n  sparkles.forEach((s) => {\n    tempSparklesArraySizes.push(s.size);\n    tempSparklesArrayColors.push(s.color.r, s.color.g, s.color.b);\n  });\n  sparklesGeometry.setAttribute(\"color\", new THREE.Float32BufferAttribute(tempSparklesArrayColors, 3));\n  sparklesGeometry.setAttribute(\"size\", new THREE.Float32BufferAttribute(tempSparklesArraySizes, 1));\n}\n\nclass Sparkle extends THREE.Vector3 {\n  setup(origin, color) {\n    this.x = origin.x;\n    this.y = origin.y;\n    this.z = origin.z;\n    this.v = new THREE.Vector3();\n    /* X Speed */\n    this.v.x = THREE.MathUtils.randFloat(0.001, 0.006);\n    this.v.x *= Math.random() > 0.5 ? 1 : -1;\n    /* Y Speed */\n    this.v.y = THREE.MathUtils.randFloat(0.001, 0.006);\n    this.v.y *= Math.random() > 0.5 ? 1 : -1;\n    /* Z Speed */\n    this.v.z = THREE.MathUtils.randFloat(0.001, 0.006);\n    this.v.z *= Math.random() > 0.5 ? 1 : -1;\n\n    this.size = Math.random() * 4 + 0.5 * pixelRatio;\n    this.slowDown = 0.4 + Math.random() * 0.58;\n    this.color = color;\n  }\n  update() {\n    if (this.v.x > 0.001 || this.v.y > 0.001 || this.v.z > 0.001) {\n      this.add(this.v);\n      this.v.multiplyScalar(this.slowDown);\n    }\n  }\n}\n\nclass Star {\n  setup(color) {\n    this.r = Math.random() * 12 + 3;\n    this.phi = Math.random() * Math.PI * 2;\n    this.theta = Math.random() * Math.PI;\n    this.v = new THREE.Vector2().random().subScalar(0.5).multiplyScalar(0.0007);\n\n    this.x = this.r * Math.sin(this.phi) * Math.sin(this.theta);\n    this.y = this.r * Math.cos(this.phi);\n    this.z = this.r * Math.sin(this.phi) * Math.cos(this.theta);\n\n    this.size = Math.random() * 4 + 0.5 * pixelRatio;\n    this.color = color;\n  }\n  update() {\n    this.phi += this.v.x;\n    this.theta += this.v.y;\n    this.x = this.r * Math.sin(this.phi) * Math.sin(this.theta);\n    this.y = this.r * Math.cos(this.phi);\n    this.z = this.r * Math.sin(this.phi) * Math.cos(this.theta);\n  }\n}\n\n/* Create stars */\nconst stars = [];\nconst galaxyGeometryVertices = [];\nconst galaxyGeometryColors = [];\nconst galaxyGeometrySizes = [];\n\nfor (let i = 0; i < 1500; i++) {\n  const star = new Star();\n  star.setup(galaxyColors[Math.floor(Math.random() * galaxyColors.length)]);\n  galaxyGeometryVertices.push(star.x, star.y, star.z);\n  galaxyGeometryColors.push(star.color.r, star.color.g, star.color.b);\n  galaxyGeometrySizes.push(star.size);\n  stars.push(star);\n}\nconst starsGeometry = new THREE.BufferGeometry();\nstarsGeometry.setAttribute(\n  \"size\",\n  new THREE.Float32BufferAttribute(galaxyGeometrySizes, 1)\n);\nstarsGeometry.setAttribute(\n  \"color\",\n  new THREE.Float32BufferAttribute(galaxyGeometryColors, 3)\n);\nconst galaxyPoints = new THREE.Points(starsGeometry, sparklesMaterial);\nscene.add(galaxyPoints);\n\nlet _prev = 0;\nfunction render(a) {\n  requestAnimationFrame(render);\n\n  galaxyPoints.rotation.y += 0.0005;\n\n  group.rotation.x = Math.sin(a * 0.0003) * 0.1;\n  group.rotation.y += 0.001;\n\n  if (a - _prev > 30) {\n    lines.forEach((l) => {\n      if (sparkles.length < 35000) {\n        nextDot(l);\n        nextDot(l);\n      }\n      const tempVertices = new Float32Array(l.coordinates);\n      l.geometry.setAttribute(\"position\", new THREE.BufferAttribute(tempVertices, 3));\n      l.geometry.computeBoundingSphere();\n    });\n    updateSparklesGeometry();\n    _prev = a;\n  }\n\n  let tempSparklesArray = [];\n  sparkles.forEach((s) => {\n    s.update();\n    tempSparklesArray.push(s.x, s.y, s.z);\n  });\n\n  sparklesGeometry.setAttribute(\"position\", new THREE.Float32BufferAttribute(tempSparklesArray, 3));\n\n  let tempStarsArray = [];\n  stars.forEach((s) => {\n    s.update();\n    tempStarsArray.push(s.x, s.y, s.z);\n  });\n\n  starsGeometry.setAttribute(\"position\", new THREE.Float32BufferAttribute(tempStarsArray, 3));\n\n  composer.render();\n}\n\nfunction onWindowResize() {\n  camera.aspect = elContent.offsetWidth / elContent.offsetHeight;\n  camera.updateProjectionMatrix();\n  composer.setSize(elContent.offsetWidth, elContent.offsetHeight);\n  renderer.setSize(elContent.offsetWidth, elContent.offsetHeight);\n  bloomPass.setSize(elContent.offsetWidth, elContent.offsetHeight);\n}\nwindow.addEventListener(\"resize\", onWindowResize);","import {\n\tColor\n} from 'three';\nimport { Pass } from '../postprocessing/Pass.js';\n\nclass RenderPass extends Pass {\n\n\tconstructor( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.overrideMaterial = overrideMaterial;\n\n\t\tthis.clearColor = clearColor;\n\t\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\t\tthis.clear = true;\n\t\tthis.clearDepth = false;\n\t\tthis.needsSwap = false;\n\t\tthis._oldClearColor = new Color();\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tlet oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( this._oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n}\n\nexport { RenderPass };\n","import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n","import {\n\tAdditiveBlending,\n\tColor,\n\tLinearFilter,\n\tMeshBasicMaterial,\n\tRGBAFormat,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tVector3,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from '../postprocessing/Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { LuminosityHighPassShader } from '../shaders/LuminosityHighPassShader.js';\n\n/**\n * UnrealBloomPass is inspired by the bloom pass of Unreal Engine. It creates a\n * mip map chain of bloom textures and blurs them with different radii. Because\n * of the weighted combination of mips, and because larger blurs are done on\n * higher mips, this effect provides good quality and performance.\n *\n * Reference:\n * - https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\n */\nclass UnrealBloomPass extends Pass {\n\n\tconstructor( resolution, strength, radius, threshold ) {\n\n\t\tsuper();\n\n\t\tthis.strength = ( strength !== undefined ) ? strength : 1;\n\t\tthis.radius = radius;\n\t\tthis.threshold = threshold;\n\t\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\n\n\t\t// create color only once here, reuse it later inside the render function\n\t\tthis.clearColor = new Color( 0, 0, 0 );\n\n\t\t// render targets\n\t\tconst pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\t\tthis.renderTargetsHorizontal = [];\n\t\tthis.renderTargetsVertical = [];\n\t\tthis.nMips = 5;\n\t\tlet resx = Math.round( this.resolution.x / 2 );\n\t\tlet resy = Math.round( this.resolution.y / 2 );\n\n\t\tthis.renderTargetBright = new WebGLRenderTarget( resx, resy, pars );\n\t\tthis.renderTargetBright.texture.name = 'UnrealBloomPass.bright';\n\t\tthis.renderTargetBright.texture.generateMipmaps = false;\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tconst renderTargetHorizonal = new WebGLRenderTarget( resx, resy, pars );\n\n\t\t\trenderTargetHorizonal.texture.name = 'UnrealBloomPass.h' + i;\n\t\t\trenderTargetHorizonal.texture.generateMipmaps = false;\n\n\t\t\tthis.renderTargetsHorizontal.push( renderTargetHorizonal );\n\n\t\t\tconst renderTargetVertical = new WebGLRenderTarget( resx, resy, pars );\n\n\t\t\trenderTargetVertical.texture.name = 'UnrealBloomPass.v' + i;\n\t\t\trenderTargetVertical.texture.generateMipmaps = false;\n\n\t\t\tthis.renderTargetsVertical.push( renderTargetVertical );\n\n\t\t\tresx = Math.round( resx / 2 );\n\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t\t// luminosity high pass material\n\n\t\tif ( LuminosityHighPassShader === undefined )\n\t\t\tconsole.error( 'THREE.UnrealBloomPass relies on LuminosityHighPassShader' );\n\n\t\tconst highPassShader = LuminosityHighPassShader;\n\t\tthis.highPassUniforms = UniformsUtils.clone( highPassShader.uniforms );\n\n\t\tthis.highPassUniforms[ 'luminosityThreshold' ].value = threshold;\n\t\tthis.highPassUniforms[ 'smoothWidth' ].value = 0.01;\n\n\t\tthis.materialHighPassFilter = new ShaderMaterial( {\n\t\t\tuniforms: this.highPassUniforms,\n\t\t\tvertexShader: highPassShader.vertexShader,\n\t\t\tfragmentShader: highPassShader.fragmentShader,\n\t\t\tdefines: {}\n\t\t} );\n\n\t\t// Gaussian Blur Materials\n\t\tthis.separableBlurMaterials = [];\n\t\tconst kernelSizeArray = [ 3, 5, 7, 9, 11 ];\n\t\tresx = Math.round( this.resolution.x / 2 );\n\t\tresy = Math.round( this.resolution.y / 2 );\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.separableBlurMaterials.push( this.getSeperableBlurMaterial( kernelSizeArray[ i ] ) );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'texSize' ].value = new Vector2( resx, resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t\t// Composite material\n\t\tthis.compositeMaterial = this.getCompositeMaterial( this.nMips );\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture1' ].value = this.renderTargetsVertical[ 0 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture2' ].value = this.renderTargetsVertical[ 1 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture3' ].value = this.renderTargetsVertical[ 2 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture4' ].value = this.renderTargetsVertical[ 3 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture5' ].value = this.renderTargetsVertical[ 4 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'bloomStrength' ].value = strength;\n\t\tthis.compositeMaterial.uniforms[ 'bloomRadius' ].value = 0.1;\n\t\tthis.compositeMaterial.needsUpdate = true;\n\n\t\tconst bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ];\n\t\tthis.compositeMaterial.uniforms[ 'bloomFactors' ].value = bloomFactors;\n\t\tthis.bloomTintColors = [ new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ) ];\n\t\tthis.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors;\n\n\t\t// copy material\n\t\tif ( CopyShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.UnrealBloomPass relies on CopyShader' );\n\n\t\t}\n\n\t\tconst copyShader = CopyShader;\n\n\t\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\n\t\tthis.copyUniforms[ 'opacity' ].value = 1.0;\n\n\t\tthis.materialCopy = new ShaderMaterial( {\n\t\t\tuniforms: this.copyUniforms,\n\t\t\tvertexShader: copyShader.vertexShader,\n\t\t\tfragmentShader: copyShader.fragmentShader,\n\t\t\tblending: AdditiveBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis.enabled = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis._oldClearColor = new Color();\n\t\tthis.oldClearAlpha = 1;\n\n\t\tthis.basic = new MeshBasicMaterial();\n\n\t\tthis.fsQuad = new FullScreenQuad( null );\n\n\t}\n\n\tdispose() {\n\n\t\tfor ( let i = 0; i < this.renderTargetsHorizontal.length; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].dispose();\n\n\t\t}\n\n\t\tfor ( let i = 0; i < this.renderTargetsVertical.length; i ++ ) {\n\n\t\t\tthis.renderTargetsVertical[ i ].dispose();\n\n\t\t}\n\n\t\tthis.renderTargetBright.dispose();\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tlet resx = Math.round( width / 2 );\n\t\tlet resy = Math.round( height / 2 );\n\n\t\tthis.renderTargetBright.setSize( resx, resy );\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].setSize( resx, resy );\n\t\t\tthis.renderTargetsVertical[ i ].setSize( resx, resy );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'texSize' ].value = new Vector2( resx, resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\trenderer.getClearColor( this._oldClearColor );\n\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setClearColor( this.clearColor, 0 );\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t// Render input to screen\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis.fsQuad.material = this.basic;\n\t\t\tthis.basic.map = readBuffer.texture;\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// 1. Extract Bright Areas\n\n\t\tthis.highPassUniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.highPassUniforms[ 'luminosityThreshold' ].value = this.threshold;\n\t\tthis.fsQuad.material = this.materialHighPassFilter;\n\n\t\trenderer.setRenderTarget( this.renderTargetBright );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// 2. Blur All the mips progressively\n\n\t\tlet inputRenderTarget = this.renderTargetBright;\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.fsQuad.material = this.separableBlurMaterials[ i ];\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = inputRenderTarget.texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = this.renderTargetsHorizontal[ i ].texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetsVertical[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tinputRenderTarget = this.renderTargetsVertical[ i ];\n\n\t\t}\n\n\t\t// Composite All the mips\n\n\t\tthis.fsQuad.material = this.compositeMaterial;\n\t\tthis.compositeMaterial.uniforms[ 'bloomStrength' ].value = this.strength;\n\t\tthis.compositeMaterial.uniforms[ 'bloomRadius' ].value = this.radius;\n\t\tthis.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors;\n\n\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ 0 ] );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// Blend it additively over the input texture\n\n\t\tthis.fsQuad.material = this.materialCopy;\n\t\tthis.copyUniforms[ 'tDiffuse' ].value = this.renderTargetsHorizontal[ 0 ].texture;\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// Restore renderer settings\n\n\t\trenderer.setClearColor( this._oldClearColor, this.oldClearAlpha );\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n\tgetSeperableBlurMaterial( kernelRadius ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t'KERNEL_RADIUS': kernelRadius,\n\t\t\t\t'SIGMA': kernelRadius\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t'colorTexture': { value: null },\n\t\t\t\t'texSize': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'direction': { value: new Vector2( 0.5, 0.5 ) }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat fSigma = float(SIGMA);\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat x = float(i);\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\n\t\t\t\t\t\tweightSum += 2.0 * w;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n\tgetCompositeMaterial( nMips ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t'NUM_MIPS': nMips\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t'blurTexture1': { value: null },\n\t\t\t\t'blurTexture2': { value: null },\n\t\t\t\t'blurTexture3': { value: null },\n\t\t\t\t'blurTexture4': { value: null },\n\t\t\t\t'blurTexture5': { value: null },\n\t\t\t\t'dirtTexture': { value: null },\n\t\t\t\t'bloomStrength': { value: 1.0 },\n\t\t\t\t'bloomFactors': { value: null },\n\t\t\t\t'bloomTintColors': { value: null },\n\t\t\t\t'bloomRadius': { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tuniform sampler2D blurTexture1;\n\t\t\t\tuniform sampler2D blurTexture2;\n\t\t\t\tuniform sampler2D blurTexture3;\n\t\t\t\tuniform sampler2D blurTexture4;\n\t\t\t\tuniform sampler2D blurTexture5;\n\t\t\t\tuniform sampler2D dirtTexture;\n\t\t\t\tuniform float bloomStrength;\n\t\t\t\tuniform float bloomRadius;\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\n\n\t\t\t\tfloat lerpBloomFactor(const in float factor) {\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n}\n\nUnrealBloomPass.BlurDirectionX = new Vector2( 1.0, 0.0 );\nUnrealBloomPass.BlurDirectionY = new Vector2( 0.0, 1.0 );\n\nexport { UnrealBloomPass };\n","/**\n * Full-screen textured quad shader\n */\n\nvar CopyShader = {\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'opacity': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = opacity * texel;\n\n\t\t}`\n\n};\n\nexport { CopyShader };\n","import {\n\tColor\n} from 'three';\n\n/**\n * Luminosity\n * http://en.wikipedia.org/wiki/Luminosity\n */\n\nconst LuminosityHighPassShader = {\n\n\tshaderID: 'luminosityHighPass',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'luminosityThreshold': { value: 1.0 },\n\t\t'smoothWidth': { value: 1.0 },\n\t\t'defaultColor': { value: new Color( 0x000000 ) },\n\t\t'defaultOpacity': { value: 0.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform vec3 defaultColor;\n\t\tuniform float defaultOpacity;\n\t\tuniform float luminosityThreshold;\n\t\tuniform float smoothWidth;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\n\t\t\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n\t\t\tfloat v = dot( texel.xyz, luma );\n\n\t\t\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\n\n\t\t\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\n\n\t\t\tgl_FragColor = mix( outputColor, texel, alpha );\n\n\t\t}`\n\n};\n\nexport { LuminosityHighPassShader };\n","import {\n\tBufferGeometry,\n\tClock,\n\tFloat32BufferAttribute,\n\tLinearFilter,\n\tMesh,\n\tOrthographicCamera,\n\tRGBAFormat,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from '../postprocessing/ShaderPass.js';\nimport { MaskPass } from '../postprocessing/MaskPass.js';\nimport { ClearMaskPass } from '../postprocessing/MaskPass.js';\n\nclass EffectComposer {\n\n\tconstructor( renderer, renderTarget ) {\n\n\t\tthis.renderer = renderer;\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst parameters = {\n\t\t\t\tminFilter: LinearFilter,\n\t\t\t\tmagFilter: LinearFilter,\n\t\t\t\tformat: RGBAFormat\n\t\t\t};\n\n\t\t\tconst size = renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._pixelRatio = 1;\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tthis.renderToScreen = true;\n\n\t\tthis.passes = [];\n\n\t\t// dependencies\n\n\t\tif ( CopyShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t\t}\n\n\t\tif ( ShaderPass === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t\t}\n\n\t\tthis.copyPass = new ShaderPass( CopyShader );\n\n\t\tthis.clock = new Clock();\n\n\t}\n\n\tswapBuffers() {\n\n\t\tconst tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t}\n\n\taddPass( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tinsertPass( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tremovePass( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t}\n\n\tisLastEnabledPass( passIndex ) {\n\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\trender( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tlet maskActive = false;\n\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\n\n\t\t\tconst pass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tconst context = this.renderer.getContext();\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\treset( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t}\n\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n}\n\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { EffectComposer, Pass, FullScreenQuad };\n","import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from '../postprocessing/Pass.js';\n\nclass ShaderPass extends Pass {\n\n\tconstructor( shader, textureID ) {\n\n\t\tsuper();\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : 'tDiffuse';\n\n\t\tif ( shader instanceof ShaderMaterial ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t\tthis.material = new ShaderMaterial( {\n\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n}\n\nexport { ShaderPass };\n","import { Pass } from '../postprocessing/Pass.js';\n\nclass MaskPass extends Pass {\n\n\tconstructor( scene, camera ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis.inverse = false;\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst context = renderer.getContext();\n\t\tconst state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tlet writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n}\n\nclass ClearMaskPass extends Pass {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.needsSwap = false;\n\n\t}\n\n\trender( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n}\n\nexport { MaskPass, ClearMaskPass };\n"],"names":["$ilwiq","parcelRequire","$0a1d3a5a6a49de03$export$802bc10488da99c7","constructor","this","enabled","needsSwap","clear","renderToScreen","setSize","render","console","error","$0a1d3a5a6a49de03$var$_camera","OrthographicCamera","$0a1d3a5a6a49de03$var$_geometry","BufferGeometry","setAttribute","Float32BufferAttribute","$0a1d3a5a6a49de03$export$3983474c8e6e978b","material","_mesh","Mesh","dispose","geometry","renderer","value","$2f93ac2d46312da9$export$57f84a24a9a6130d","uniforms","tDiffuse","opacity","vertexShader","fragmentShader","$a034d2d59dd75b4e$export$30029d01c9072e8b","shaderID","luminosityThreshold","smoothWidth","defaultColor","Color","defaultOpacity","$ca010d9f34e35dc3$export$d4d608c865617544","resolution","strength","radius","threshold","super","undefined","Vector2","x","y","clearColor","pars","minFilter","LinearFilter","magFilter","format","RGBAFormat","renderTargetsHorizontal","renderTargetsVertical","nMips","resx","Math","round","resy","renderTargetBright","WebGLRenderTarget","texture","name","generateMipmaps","i","renderTargetHorizonal","push","renderTargetVertical","highPassShader","highPassUniforms","UniformsUtils","clone","materialHighPassFilter","ShaderMaterial","defines","separableBlurMaterials","kernelSizeArray","i1","getSeperableBlurMaterial","compositeMaterial","getCompositeMaterial","needsUpdate","bloomTintColors","Vector3","copyShader","copyUniforms","materialCopy","blending","AdditiveBlending","depthTest","depthWrite","transparent","_oldClearColor","oldClearAlpha","basic","MeshBasicMaterial","fsQuad","length","width","height","writeBuffer","readBuffer","deltaTime","maskActive","getClearColor","getClearAlpha","oldAutoClear","autoClear","setClearColor","state","buffers","stencil","setTest","map","setRenderTarget","inputRenderTarget","BlurDirectionX","BlurDirectionY","kernelRadius","KERNEL_RADIUS","SIGMA","colorTexture","texSize","direction","NUM_MIPS","blurTexture1","blurTexture2","blurTexture3","blurTexture4","blurTexture5","dirtTexture","bloomStrength","bloomFactors","bloomRadius","$6ac47a3de6300e1f$export$c55093fd4f9e42f0","shader","textureID","Object","assign","autoClearColor","autoClearDepth","autoClearStencil","$0f4907a355572481$export$bb424a4005d6dde0","scene","camera","inverse","context","getContext","writeValue","clearValue","color","setMask","depth","setLocked","setOp","REPLACE","setFunc","ALWAYS","setClear","EQUAL","KEEP","$0f4907a355572481$export$8d8650aed29c6251","$1f89f80dfbd5e815$var$_geometry","$8eebb2d53d5bcf86$var$elContent","document","querySelector","$8eebb2d53d5bcf86$var$scene","Scene","$8eebb2d53d5bcf86$var$camera","PerspectiveCamera","offsetWidth","offsetHeight","position","z","$8eebb2d53d5bcf86$var$renderer","WebGLRenderer","setPixelRatio","appendChild","domElement","$8eebb2d53d5bcf86$var$renderScene","overrideMaterial","clearAlpha","clearDepth","oldOverrideMaterial","$8eebb2d53d5bcf86$var$bloomPass","$8eebb2d53d5bcf86$var$composer","renderTarget","parameters","size","getSize","_pixelRatio","getPixelRatio","_width","_height","renderTarget1","renderTarget2","passes","copyPass","clock","Clock","swapBuffers","tmp","addPass","pass","insertPass","index","splice","removePass","indexOf","isLastEnabledPass","passIndex","getDelta","currentRenderTarget","getRenderTarget","il","NOTEQUAL","reset","effectiveWidth","effectiveHeight","pixelRatio","$8eebb2d53d5bcf86$var$group","Group","add","$8eebb2d53d5bcf86$var$sparkles","$8eebb2d53d5bcf86$var$sparklesGeometry","$8eebb2d53d5bcf86$var$sparklesMaterial","pointTexture","TextureLoader","load","getElementById","textContent","alphaTest","$8eebb2d53d5bcf86$var$points","Points","$8eebb2d53d5bcf86$var$sampler","$8eebb2d53d5bcf86$var$lines","$8eebb2d53d5bcf86$var$linesMaterials","LineBasicMaterial","$8eebb2d53d5bcf86$var$galaxyColors","multiplyScalar","$8eebb2d53d5bcf86$var$whale","$8YxfO","OBJLoader","obj","children","scale","translate","rotateY","$9aI46","MeshSurfaceSampler","build","linesMesh","Line","coordinates","previous","requestAnimationFrame","$8eebb2d53d5bcf86$var$render","$8eebb2d53d5bcf86$var$dots","xhr","log","loaded","total","err","$8eebb2d53d5bcf86$var$p1","$8eebb2d53d5bcf86$var$nextDot","line","ok","sample","distanceTo","spark","$8eebb2d53d5bcf86$var$Sparkle","setup","origin","v","MathUtils","randFloat","random","slowDown","update","$8eebb2d53d5bcf86$var$Star","r","phi","PI","theta","subScalar","sin","cos","$8eebb2d53d5bcf86$var$stars","$8eebb2d53d5bcf86$var$galaxyGeometryVertices","$8eebb2d53d5bcf86$var$galaxyGeometryColors","$8eebb2d53d5bcf86$var$galaxyGeometrySizes","star","floor","g","b","$8eebb2d53d5bcf86$var$starsGeometry","$8eebb2d53d5bcf86$var$galaxyPoints","$8eebb2d53d5bcf86$var$_prev","a","rotation","forEach","l","tempVertices","Float32Array","BufferAttribute","computeBoundingSphere","tempSparklesArraySizes","tempSparklesArrayColors","s","$8eebb2d53d5bcf86$var$updateSparklesGeometry","tempSparklesArray","tempStarsArray","window","addEventListener","aspect","updateProjectionMatrix"],"version":3,"file":"index2.3ab77e8d.js.map"}