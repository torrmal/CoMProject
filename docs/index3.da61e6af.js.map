{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,S,0BAIA,MAAMC,EAAYC,SAASC,cAAc,YACnCC,EAAQ,IAAIL,EAAAM,MACZC,EAAS,IAAIP,EAAAQ,kBACjB,GACAN,EAAUO,YAAcP,EAAUQ,aAClC,GACA,KAEFH,EAAOI,SAASC,EAAI,EACpBL,EAAOI,SAASE,EAAI,EACpBN,EAAOO,OAAO,EAAE,EAAE,GAElB,MAAMC,EAAW,IAAIf,EAAAgB,cAAoB,CACvCC,WAAW,EACXC,OAAO,IAETH,EAASI,QAAQjB,EAAUO,YAAaP,EAAUQ,cAClDR,EAAUkB,YAAYL,EAASM,YAE/B,MAAMC,EAAQ,IAAItB,EAAAuB,MAClBlB,EAAMmB,IAAIF,GAEV,IAAIG,EAAU,KAEVC,EAAQ,IACZ,IAAI,EAAAC,EAAAC,YAAYC,KACd,WACCC,IACCL,EAAU,IAAI,EAAAM,EAAAC,oBAAmBF,EAAIG,SAAS,IAAIC,QAElD,IAAK,IAAIC,EAAI,EAAEA,EAAI,EAAGA,IAAK,CACzB,MAAMC,EAAO,IAAIC,EAAKF,GACtBT,EAAMY,KAAKF,GACXd,EAAME,IAAIY,EAAKG,KACjB,CAEAxB,EAASyB,iBAAiBC,EAAA,IAE3BC,GAAQC,QAAQC,IAAIF,EAAKG,OAASH,EAAII,MAAS,IAAM,cACrDC,IACCJ,QAAQC,IAAI,QACZD,QAAQK,MAAMD,EAAA,IAIlB,MAAME,EAAe,IAAIjD,EAAAkD,QACnBC,EAAY,CAAC,IAAInD,EAAAoD,kBAAwB,CAACC,MAAO,SAAUC,aAAa,EAAMC,QAAS,KAC7F,IAAIvD,EAAAoD,kBAAwB,CAACC,MAAO,SAAUC,aAAa,EAAMC,QAAS,KAC1E,IAAIvD,EAAAoD,kBAAwB,CAACC,MAAO,SAAUC,aAAa,EAAMC,QAAS,KAC1E,IAAIvD,EAAAoD,kBAAwB,CAACC,MAAO,SAAUC,aAAa,EAAMC,QAAS,MAC1E,MAAMlB,EACJmB,YAAaC,GACXC,KAAKC,SAAW,IAAI3D,EAAA4D,eACpBF,KAAKG,SAAWV,EAAUM,EAAQ,GAClCC,KAAKnB,KAAO,IAAIvC,EAAA8D,KAAWJ,KAAKC,SAAUD,KAAKG,UAC/CH,KAAKK,SAAW,GAEhBtC,EAAQuC,OAAOf,GACfS,KAAKO,cAAgBhB,EAAaiB,OACpC,CACAC,SACE,IAAIC,GAAa,EACjB,MAAQA,GACN3C,EAAQuC,OAAOf,GACXA,EAAaoB,WAAWX,KAAKO,eAAiB,KAChDP,KAAKK,SAASzB,KAAKW,EAAaqB,EAAGrB,EAAapC,EAAGoC,EAAarC,GAChE8C,KAAKO,cAAgBhB,EAAaiB,QAClCE,GAAa,GAGjBV,KAAKC,SAASY,aAAa,WAAY,IAAIvE,EAAAwE,uBAA6Bd,KAAKK,SAAU,GACzF,EAIF,SAAStB,EAAOgC,GACdnD,EAAMoD,SAAS7D,GAAK,KAEpBa,EAAMiD,SAAQvC,IACRA,EAAK2B,SAASa,OAAS,KACzBxC,EAAK+B,QAAM,IAIfpD,EAAS8D,OAAOxE,EAAOE,EACzB,CAEAuE,OAAOC,iBAAiB,UAExB,WACExE,EAAOyE,OAAS9E,EAAUO,YAAcP,EAAUQ,aAClDH,EAAO0E,yBACPlE,EAASI,QAAQjB,EAAUO,YAAaP,EAAUQ,aACpD,IANkD","sources":["src/js/demo3.js"],"sourcesContent":["import * as THREE from 'three';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\nimport { MeshSurfaceSampler } from 'three/examples/jsm/math/MeshSurfaceSampler.js';\n\nconst elContent = document.querySelector('.content');\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(\n  75,\n  elContent.offsetWidth / elContent.offsetHeight,\n  0.1,\n  1000\n);\ncamera.position.z = 2;\ncamera.position.y = 2;\ncamera.lookAt(0,0,0);\n\nconst renderer = new THREE.WebGLRenderer({\n  antialias: true,\n  alpha: true\n});\nrenderer.setSize(elContent.offsetWidth, elContent.offsetHeight);\nelContent.appendChild(renderer.domElement);\n\nconst group = new THREE.Group();\nscene.add(group);\n\nlet sampler = null;\nlet elephant = null;\nlet paths = [];\nnew OBJLoader().load(\n  \"man.obj\",\n  (obj) => { \n    sampler = new MeshSurfaceSampler(obj.children[0]).build();\n    \n    for (let i = 0;i < 4; i++) {\n      const path = new Path(i);\n      paths.push(path);\n      group.add(path.line);\n    }\n    \n    renderer.setAnimationLoop(render);\n  },\n  (xhr) => console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\"),\n  (err) => {\n    console.log('oops');\n    console.error(err)\n  }\n);\n\nconst tempPosition = new THREE.Vector3();\nconst materials = [new THREE.LineBasicMaterial({color: 0xFAAD80, transparent: true, opacity: 0.5}),\nnew THREE.LineBasicMaterial({color: 0xFF6767, transparent: true, opacity: 0.5}),\nnew THREE.LineBasicMaterial({color: 0xFF3D68, transparent: true, opacity: 0.5}),\nnew THREE.LineBasicMaterial({color: 0xA73489, transparent: true, opacity: 0.5})];\nclass Path {\n  constructor (index) {\n    this.geometry = new THREE.BufferGeometry();\n    this.material = materials[index % 4];\n    this.line = new THREE.Line(this.geometry, this.material);\n    this.vertices = [];\n    \n    sampler.sample(tempPosition);\n    this.previousPoint = tempPosition.clone();\n  }\n  update () {\n    let pointFound = false;\n    while (!pointFound) {\n      sampler.sample(tempPosition);\n      if (tempPosition.distanceTo(this.previousPoint) < 30) {\n        this.vertices.push(tempPosition.x, tempPosition.y, tempPosition.z);\n        this.previousPoint = tempPosition.clone();\n        pointFound = true;\n      }\n    }\n    this.geometry.setAttribute(\"position\", new THREE.Float32BufferAttribute(this.vertices, 3));\n  }\n}\n\n\nfunction render(a) {\n  group.rotation.y += 0.002;\n  \n  paths.forEach(path => {\n    if (path.vertices.length < 10000) {\n      path.update();\n    }\n  });\n\n  renderer.render(scene, camera);\n}\n\nwindow.addEventListener(\"resize\", onWindowResize, false);\n\nfunction onWindowResize() {\n  camera.aspect = elContent.offsetWidth / elContent.offsetHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(elContent.offsetWidth, elContent.offsetHeight);\n}\n"],"names":["$ilwiq","parcelRequire","$6c58f9512146d271$var$elContent","document","querySelector","$6c58f9512146d271$var$scene","Scene","$6c58f9512146d271$var$camera","PerspectiveCamera","offsetWidth","offsetHeight","position","z","y","lookAt","$6c58f9512146d271$var$renderer","WebGLRenderer","antialias","alpha","setSize","appendChild","domElement","$6c58f9512146d271$var$group","Group","add","$6c58f9512146d271$var$sampler","$6c58f9512146d271$var$paths","$8YxfO","OBJLoader","load","obj","$9aI46","MeshSurfaceSampler","children","build","i","path","$6c58f9512146d271$var$Path","push","line","setAnimationLoop","$6c58f9512146d271$var$render","xhr","console","log","loaded","total","err","error","$6c58f9512146d271$var$tempPosition","Vector3","$6c58f9512146d271$var$materials","LineBasicMaterial","color","transparent","opacity","constructor","index","this","geometry","BufferGeometry","material","Line","vertices","sample","previousPoint","clone","update","pointFound","distanceTo","x","setAttribute","Float32BufferAttribute","a","rotation","forEach","length","render","window","addEventListener","aspect","updateProjectionMatrix"],"version":3,"file":"index3.da61e6af.js.map"}